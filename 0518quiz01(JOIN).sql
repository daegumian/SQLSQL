/*문제 1. O
-EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
-EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서
각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. (달라지는 행의 개수 확인)*/

SELECT * FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E FULL JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--TEACHER
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;--KING 안나옴, 120이하부서까지만 나옴
SELECT * FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; --KING 나옴 , 120이하부서까지만 나옴
SELECT * FROM EMPLOYEES E RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; --KING 안나옴, 120이상부서까지 다나옴
SELECT * FROM EMPLOYEES E FULL JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID; --KING까지, 120이상 부서까지 다 나옴


/*문제 2. O
-EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다*/

SELECT FIRST_NAME||' ' || LAST_NAME AS 이름, E.DEPARTMENT_ID
FROM EMPLOYEES E 
JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE EMPLOYEE_ID = 200;

--TEACHER
SELECT CONCAT(E.FIRST_NAME, E.LAST_NAME) AS 이름,
            E.DEPARTMENT_ID
FROM EMPLOYEES E 
JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE EMPLOYEE_ID = 200;

/*문제 3. O
-EMPLOYEES, JOBS테이블을 INNER JOIN하세요
조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
HINT) 어떤 컬럼으로 서로 연결되 있는지 확인*/

SELECT CONCAT(FIRST_NAME, LAST_NAME), E.JOB_ID, JOB_TITLE
FROM EMPLOYEES E 
JOIN JOBS J 
ON e.job_id = j.job_id
ORDER BY FIRST_NAME ASC;

--TEACHER
SELECT * FROM JOBS;
SELECT E.FIRST_NAME,
             J.JOB_TITLE
FROM EMPLOYEES E JOIN JOBS J USING (JOB_ID)
ORDER BY FIRST_NAME;



/*문제 4. O
--JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.*/
SELECT * 
FROM JOBS J 
LEFT JOIN JOB_HISTORY H 
ON J.JOB_ID = H.JOB_ID;

--TEACHER
SELECT * FROM JOBS;
SELECT * FROM JOB_HISTORY;
SELECT * FROM JOBS J1 LEFT JOIN JOB_HISTORY J2 ON J1.JOB_ID = J2.JOB_ID;


/*문제 5. O
--Steven King의 부서명을 출력하세요.*/

SELECT FIRST_NAME, DEPARTMENT_NAME AS StevenKing부서명 
FROM EMPLOYEES E 
JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE  FIRST_NAME = 'Steven' AND LAST_NAME = 'King';

--TEACHER
SELECT FIRST_NAME,
            DEPARTMENT_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE FIRST_NAME = 'Steven' AND LAST_NAME = 'King';

/*문제 6. O
--EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요*/

SELECT * FROM EMPLOYEES CROSS JOIN DEPARTMENTS;

--TEACHER
SELECT * FROM EMPLOYEES CROSS JOIN DEPARTMENTS;

/*문제 7. O
--EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고 SA_MAN 사원만의 사원번호, 이름,
급여, 부서명, 근무지를 출력하세요. (Alias를 사용)*/

SELECT EMPLOYEE_ID AS 사원번호 , FIRST_NAME AS 이름, SALARY AS 급여, DEPARTMENT_NAME AS 부서명, CITY AS 근무지
FROM EMPLOYEES E 
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
WHERE E.JOB_ID = 'SA_MAN';

--TEACHER
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT E.FIRST_NAME,
             E.SALARY,
             D.DEPARTMENT_NAME,
             L.CITY
FROM EMPLOYEES E 
LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
WHERE JOB_ID = 'SA_MAN';



/*문제 8.
-- employees, jobs 테이블을 조인 지정하고 job_title이 'Stock Manager', 'Stock Clerk'인 직원 정보만
출력하세요.*/
SELECT *
FROM EMPLOYEES E
JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE JOB_TITLE = 'Stock Manager' or JOB_TITLE = 'Stock Clerk';

--TEACHER
--정답과 같다




/*문제 9. x -> 기준이 DEPARTMENTS가 되어야함, 부서 : DEPARTMENT_NAME
-- departments 테이블에서 직원이 없는 부서를 찾아 출력하세요. LEFT OUTER JOIN 사용*/ 
SELECT * 
FROM  EMPLOYEES E
LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.DEPARTMENT_ID IS NULL;

--TEACHER
SELECT DEPARTMENT_NAME
FROM DEPARTMENTS D LEFT JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE EMPLOYEE_ID IS NULL;

/*문제 10. X -> 다시 해보기.
-join을 이용해서 사원의 이름과 그 사원의 매니저 이름을 출력하세요
힌트) EMPLOYEES 테이블과 EMPLOYEES 테이블을 조인하세요.*/
SELECT E1.FIRST_NAME||' '||E1.LAST_NAME AS 이름, E2.FIRST_NAME AS 매니저
FROM EMPLOYEES E1
JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE E1.MANAGER_ID IS NOT NULL;

--TEACHER
SELECT E1.EMPLOYEE_ID AS 사원번호,
             E1.FIRST_NAME AS 사원명,
             E2. FIRST_NAME AS 매니저이름
 FROM EMPLOYEES E1 LEFT JOIN EMPLOYEES E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID;


/*문제 11. X -> 다시 해보기. SELF, LEFT JOIN의 특징들을 잘 파악하면서 고고!
--6. EMPLOYEES 테이블에서 left join하여 관리자(매니저)와, 매니저의 이름, 매니저의 급여 까지 출력하세요
--매니저 아이디가 없는 사람은 배제하고 급여는 역순으로 출력하세요*/

SELECT   E1.FIRST_NAME||' ' ||E1.LAST_NAME AS 사원명, 
               E1.SALARY AS 사원급여,
               E2.FIRST_NAME AS 매니저, 
               E2.SALARY AS 매니저급여
FROM EMPLOYEES E1
LEFT JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE E1.MANAGER_ID IS NOT NULL
ORDER BY E1.SALARY DESC;

SELECT * FROM EMPLOYEES;

--TEACHER
SELECT E1.FIRST_NAME AS 사원명,
             E1.SALARY AS 사원급여,
             E2.EMPLOYEE_ID AS 매니저아이디,
             E2.FIRST_NAME AS 매니저명,
             E2.SALARY AS 매니저급여
FROM EMPLOYEES E1 LEFT JOIN EMPLOYEES E2 ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE E2.EMPLOYEE_ID IS NOT NULL
ORDER BY E1.SALARY DESC;


